apiVersion: v1
kind: Namespace
metadata:
  name: immich
---
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: immich
type: Opaque
data:
  postgres-password: cG9zdGdyZXNxbA==  # postgresql base64 encoded
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: immich
spec:
  selector:
    app: postgresql
  type: ClusterIP
  ports:
  - name: postgres
    protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgresql-longhorn-pv
  namespace: immich
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  capacity:
      storage: 40Gi
  csi:
    driver: driver.longhorn.io
    fsType: ext4
    volumeHandle: postgresql
  persistentVolumeReclaimPolicy: Retain
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-longhorn-pvc
  namespace: immich
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
  storageClassName: longhorn
  volumeName: postgresql-longhorn-pv
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-initdb
  namespace: immich
data:
  01-extensions.sql: |
    CREATE EXTENSION IF NOT EXISTS cube;
    CREATE EXTENSION IF NOT EXISTS earthdistance;
    CREATE EXTENSION IF NOT EXISTS vchord CASCADE;
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  namespace: immich
spec:
  serviceName: postgresql-service
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgresql
        image: tensorchord/vchord-postgres:pg16-v0.4.3
        imagePullPolicy: Always
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=C"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres
          failureThreshold: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres
          failureThreshold: 3
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U postgres
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
        - name: initdb-scripts
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgresql-data
        persistentVolumeClaim:
          claimName: postgresql-longhorn-pvc
      - name: initdb-scripts
        configMap:
          name: postgresql-initdb
