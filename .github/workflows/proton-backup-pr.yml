name: Proton Drive Backup - Pull Request

on:
  pull_request:
    branches: [main, master]
    paths:
      - "proton-drive-backup/**"
      - ".github/workflows/proton-backup-*.yml"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/proton-drive-backup

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=sha

      - name: Get current date
        id: date
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build Docker image for scanning
        id: build
        uses: docker/build-push-action@cb8fc7586f9ad9441b20c33e0f6e8b1b58d8b4c6
        with:
          context: ./proton-drive-backup
          platforms: linux/amd64
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ steps.date.outputs.BUILD_DATE }}
            VCS_REF=${{ github.event.pull_request.head.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: sarif
          output: trivy-results.sarif
          exit-code: 0

      - name: Upload Trivy scan results to GitHub Security
        if: always() && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@573acd9552f33577783abde4acb66a1058e762e5
        with:
          sarif_file: trivy-results.sarif

      - name: Comment PR with build summary
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
            const output = `
            ## 🐳 Container Build Summary

            **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`
            **Digest**: \`${{ steps.build.outputs.digest }}\`
            **Platform**: linux/amd64 (vulnerability scan only)
            **Version**: \`${{ steps.meta.outputs.version }}\`

            ### Security Scan Results
            - ✅ Trivy vulnerability scan completed
            - 📊 Results uploaded to GitHub Security tab
            - 🔍 Review any findings before merging

            > **Note**: Image is built but not pushed for pull requests.
            > Production multi-platform build happens after merge to main branch.
            `;

            // Check if a comment with this content already exists
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('🐳 Container Build Summary')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: output
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: Clean up scan artifact
        if: always() && steps.build.outputs.digest
        run: |
          # Get the package version ID for the scan artifact
          PACKAGE_VERSION_ID=$(gh api \
            "repos/${{ github.repository }}/packages/container/proton-drive-backup/versions" \
            --jq '.[] | select(.metadata.container.tags[] | contains("pr-${{ github.event.number }}")) | .id' \
            2>/dev/null || echo "")

          if [ -n "$PACKAGE_VERSION_ID" ]; then
            echo "Cleaning up scan artifact with ID: $PACKAGE_VERSION_ID"
            gh api --method DELETE \
              "repos/${{ github.repository }}/packages/container/proton-drive-backup/versions/$PACKAGE_VERSION_ID" || \
              echo "Failed to delete scan artifact (may not exist or already deleted)"
          else
            echo "No scan artifact found to clean up"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}