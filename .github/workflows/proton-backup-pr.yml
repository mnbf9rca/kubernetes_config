name: Proton Drive Backup - Pull Request

on:
  pull_request:
    branches: [main, master]
    paths:
      - "proton-drive-backup/**"
      - ".github/workflows/proton-backup-*.yml"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/proton-drive-backup

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@1583c0f09d26c58c59d25b0eef29792b7ce99d9a

      - name: Log in to Container Registry
        uses: docker/login-action@5b7b28b1cc417bbd34cd8c225a957c9ce9adf7f2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@032a4b3bda1b716928481836ac5bfe36e1feaad6
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=pr-${{ github.event.number }}-${{ github.event.pull_request.head.sha }}

      - name: Get current date
        id: date
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@cb8fc7586f9ad9441b20c33e0f6e8b1b58d8b4c6
        with:
          context: ./proton-drive-backup
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ steps.date.outputs.BUILD_DATE }}
            VCS_REF=${{ github.event.pull_request.head.sha }}
            VERSION=${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push=true

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62
        with:
          cosign-release: "v2.6.0"

      - name: Sign the container image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}"
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: sarif
          output: trivy-results.sarif
          exit-code: 0

      - name: Upload Trivy scan results to GitHub Security
        if: always() && hashFiles('trivy-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@0337c4c06e7e00d0d6e64396c13b9dc18dd6d8c5
        with:
          sarif_file: trivy-results.sarif

      - name: Comment PR with build summary
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          script: |
            const output = `
            ## üê≥ Container Build Summary

            **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`
            **Digest**: \`${{ steps.build.outputs.digest }}\`
            **Platform**: linux/amd64
            **Tags**: \`pr-${{ github.event.number }}\`, \`${{ github.event.pull_request.head.ref }}-${{ github.event.pull_request.head.sha }}\`

            ### Security Features
            - ‚úÖ Container image built and pushed
            - ‚úÖ Signed with Cosign (keyless)
            - ‚úÖ Trivy vulnerability scan completed
            - üìä Results uploaded to GitHub Security tab
            - üîç Review any findings before merging

            > **Note**: Image is built, signed, and scanned for pull requests.
            > Release workflow will retag this image upon merge.
            `;

            // Check if a comment with this content already exists
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(comment =>
              comment.body.includes('üê≥ Container Build Summary')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: output
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

